# search.py
# ---------
# Licensing Information:  You are free to use or extend these projects for 
# educational purposes provided that (1) you do not distribute or publish 
# solutions, (2) you retain this notice, and (3) you provide clear 
# attribution to UC Berkeley, including a link to 
# http://inst.eecs.berkeley.edu/~cs188/pacman/pacman.html
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero 
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and 
# Pieter Abbeel (pabbeel@cs.berkeley.edu).

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util
import code

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()

def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]

def generalStrategy(s, n, c):
  s[c] = n

def search(problem, fringe, strategy=generalStrategy, update=lambda n,c: True):
  start = problem.getStartState()
  closed = set()
  state = {}
  fringe.push(start)
  while not fringe.isEmpty():
    node = fringe.pop()
    if problem.isGoalState(node): return getPath(problem, state, node)
    elif node not in closed:
      closed.add(node)
      for (child, action, cost) in problem.getSuccessors(node):
        if update(node, child):
          fringe.push(child)
          strategy(state, child, node)

def getPath(problem, state, goal):
  path = []
  print str(state)
  node = goal
  while node in state:
    path += [node]
    print node
    node = state[node]

  actions = []
  node = path.pop()
  while len(path) > 0:
    match = path.pop()
    for (child, action, _) in problem.getSuccessors(node): actions += [action]
    node = match

def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    return search(problem, util.Stack())
    """
    start = problem.getStartState()
    closed = set()
    state = {start: []}
    S = util.Stack()
    S.push(start)
    while not S.isEmpty():
      root = S.pop()
      if problem.isGoalState(root): return state[root]
      elif not (root in closed):
        closed.add(root)
        for (child, action, cost) in problem.getSuccessors(root):
          if child not in closed:
            state[child] = state[root] + [action]
            S.push(child)
    """

def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    """
    """
    start = problem.getStartState()
    closed = set()
    state = {start: []}
    S = util.Queue()
    S.push(start)
    while not S.isEmpty():
      root = S.pop()
      if problem.isGoalState(root): return state[root]
      elif root not in closed:
        closed.add(root)
        for (child, action, cost) in problem.getSuccessors(root):
          if child not in closed and child not in S.list:
            state[child] = state[root] + [action]
            S.push(child)
    """

def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    start = problem.getStartState()
    closed = set()
    state = {start: ([], 0)}
    S = util.PriorityQueue()
    S.push(start, 0)
    while not S.isEmpty():
      root = S.pop()
      if problem.isGoalState(root): return state[root][0]
      elif root not in closed:
        closed.add(root)
        for (child, action, cost) in problem.getSuccessors(root):
          if child not in closed and child not in S.list:
            cost += state[root][1]
            state[child] = (state[root][0] + [action], state[root][1])
            S.push(child, cost)

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    start = problem.getStartState()
    queue = util.PriorityQueue()
    closed = set()
    startCost = heuristic(start, problem)
    queue.push((start, startCost), startCost)
    actions = {start: []}
    while not queue.isEmpty():
      state, rootCost = queue.pop()
      closed.add(state)
      for (child, action, cost) in  problem.getSuccessors(state):
        if problem.isGoalState(state):
          return actions[state] + [action]
        if not child in closed:
          totalCost = rootCost + cost + heuristic(child, problem)
          queue.push((child, totalCost), totalCost)
          actions[child] = actions[state] + [action]

# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
